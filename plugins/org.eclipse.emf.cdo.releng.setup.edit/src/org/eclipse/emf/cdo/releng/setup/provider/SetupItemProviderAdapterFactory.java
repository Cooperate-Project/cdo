/*
 * Copyright (c) 2013, 2014 Eike Stepper (Berlin, Germany) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Eike Stepper - initial API and implementation
 */
package org.eclipse.emf.cdo.releng.setup.provider;

import org.eclipse.emf.cdo.releng.setup.SetupPackage;
import org.eclipse.emf.cdo.releng.setup.util.SetupAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
@SuppressWarnings("deprecation")
public class SetupItemProviderAdapterFactory extends SetupAdapterFactory implements ComposeableAdapterFactory,
    IChangeNotifier, IDisposable, IChildCreationExtender
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This helps manage the child creation extenders.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
      SetupEditPlugin.INSTANCE, SetupPackage.eNS_URI);

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetupItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.MetaIndex} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MetaIndexItemProvider metaIndexItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.MetaIndex}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMetaIndexAdapter()
  {
    if (metaIndexItemProvider == null)
    {
      metaIndexItemProvider = new MetaIndexItemProvider(this);
    }

    return metaIndexItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Index} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexItemProvider indexItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Index}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIndexAdapter()
  {
    if (indexItemProvider == null)
    {
      indexItemProvider = new IndexItemProvider(this);
    }

    return indexItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Eclipse} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EclipseItemProvider eclipseItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Eclipse}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEclipseAdapter()
  {
    if (eclipseItemProvider == null)
    {
      eclipseItemProvider = new EclipseItemProvider(this);
    }

    return eclipseItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Configuration} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationItemProvider configurationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Configuration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConfigurationAdapter()
  {
    if (configurationItemProvider == null)
    {
      configurationItemProvider = new ConfigurationItemProvider(this);
    }

    return configurationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Project} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectItemProvider projectItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Project}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProjectAdapter()
  {
    if (projectItemProvider == null)
    {
      projectItemProvider = new ProjectItemProvider(this);
    }

    return projectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Branch} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BranchItemProvider branchItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Branch}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBranchAdapter()
  {
    if (branchItemProvider == null)
    {
      branchItemProvider = new BranchItemProvider(this);
    }

    return branchItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ApiBaselineTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApiBaselineTaskItemProvider apiBaselineTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ApiBaselineTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApiBaselineTaskAdapter()
  {
    if (apiBaselineTaskItemProvider == null)
    {
      apiBaselineTaskItemProvider = new ApiBaselineTaskItemProvider(this);
    }

    return apiBaselineTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.GitCloneTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GitCloneTaskItemProvider gitCloneTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.GitCloneTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGitCloneTaskAdapter()
  {
    if (gitCloneTaskItemProvider == null)
    {
      gitCloneTaskItemProvider = new GitCloneTaskItemProvider(this);
    }

    return gitCloneTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ProjectSetImportTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectSetImportTaskItemProvider projectSetImportTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ProjectSetImportTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProjectSetImportTaskAdapter()
  {
    if (projectSetImportTaskItemProvider == null)
    {
      projectSetImportTaskItemProvider = new ProjectSetImportTaskItemProvider(this);
    }

    return projectSetImportTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.P2Task} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected P2TaskItemProvider p2TaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.P2Task}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createP2TaskAdapter()
  {
    if (p2TaskItemProvider == null)
    {
      p2TaskItemProvider = new P2TaskItemProvider(this);
    }

    return p2TaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.InstallableUnit} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InstallableUnitItemProvider installableUnitItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.InstallableUnit}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInstallableUnitAdapter()
  {
    if (installableUnitItemProvider == null)
    {
      installableUnitItemProvider = new InstallableUnitItemProvider(this);
    }

    return installableUnitItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.P2Repository} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected P2RepositoryItemProvider p2RepositoryItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.P2Repository}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createP2RepositoryAdapter()
  {
    if (p2RepositoryItemProvider == null)
    {
      p2RepositoryItemProvider = new P2RepositoryItemProvider(this);
    }

    return p2RepositoryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Setup} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SetupItemProvider setupItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Setup}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSetupAdapter()
  {
    if (setupItemProvider == null)
    {
      setupItemProvider = new SetupItemProvider(this);
    }

    return setupItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.WorkingSetTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkingSetTaskItemProvider workingSetTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.WorkingSetTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWorkingSetTaskAdapter()
  {
    if (workingSetTaskItemProvider == null)
    {
      workingSetTaskItemProvider = new WorkingSetTaskItemProvider(this);
    }

    return workingSetTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ResourceCopyTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourceCopyTaskItemProvider resourceCopyTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ResourceCopyTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResourceCopyTaskAdapter()
  {
    if (resourceCopyTaskItemProvider == null)
    {
      resourceCopyTaskItemProvider = new ResourceCopyTaskItemProvider(this);
    }

    return resourceCopyTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.TextModifyTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TextModifyTaskItemProvider textModifyTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.TextModifyTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTextModifyTaskAdapter()
  {
    if (textModifyTaskItemProvider == null)
    {
      textModifyTaskItemProvider = new TextModifyTaskItemProvider(this);
    }

    return textModifyTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.TextModification} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TextModificationItemProvider textModificationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.TextModification}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTextModificationAdapter()
  {
    if (textModificationItemProvider == null)
    {
      textModificationItemProvider = new TextModificationItemProvider(this);
    }

    return textModificationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.KeyBindingTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeyBindingTaskItemProvider keyBindingTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.KeyBindingTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createKeyBindingTaskAdapter()
  {
    if (keyBindingTaskItemProvider == null)
    {
      keyBindingTaskItemProvider = new KeyBindingTaskItemProvider(this);
    }

    return keyBindingTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.KeyBindingContext} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeyBindingContextItemProvider keyBindingContextItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.KeyBindingContext}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createKeyBindingContextAdapter()
  {
    if (keyBindingContextItemProvider == null)
    {
      keyBindingContextItemProvider = new KeyBindingContextItemProvider(this);
    }

    return keyBindingContextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.CommandParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommandParameterItemProvider commandParameterItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.CommandParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCommandParameterAdapter()
  {
    if (commandParameterItemProvider == null)
    {
      commandParameterItemProvider = new CommandParameterItemProvider(this);
    }

    return commandParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.MylynQueryTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MylynQueryTaskItemProvider mylynQueryTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.MylynQueryTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMylynQueryTaskAdapter()
  {
    if (mylynQueryTaskItemProvider == null)
    {
      mylynQueryTaskItemProvider = new MylynQueryTaskItemProvider(this);
    }

    return mylynQueryTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.MylynQueriesTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MylynQueriesTaskItemProvider mylynQueriesTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.MylynQueriesTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMylynQueriesTaskAdapter()
  {
    if (mylynQueriesTaskItemProvider == null)
    {
      mylynQueriesTaskItemProvider = new MylynQueriesTaskItemProvider(this);
    }

    return mylynQueriesTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Query} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryItemProvider queryItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Query}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQueryAdapter()
  {
    if (queryItemProvider == null)
    {
      queryItemProvider = new QueryItemProvider(this);
    }

    return queryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryAttributeItemProvider queryAttributeItemProvider;

  /**
   * This creates an adapter for a {@link java.util.Map.Entry}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQueryAttributeAdapter()
  {
    if (queryAttributeItemProvider == null)
    {
      queryAttributeItemProvider = new QueryAttributeItemProvider(this);
    }

    return queryAttributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.MylynBuildsTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MylynBuildsTaskItemProvider mylynBuildsTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.MylynBuildsTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMylynBuildsTaskAdapter()
  {
    if (mylynBuildsTaskItemProvider == null)
    {
      mylynBuildsTaskItemProvider = new MylynBuildsTaskItemProvider(this);
    }

    return mylynBuildsTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.BuildPlan} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BuildPlanItemProvider buildPlanItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.BuildPlan}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBuildPlanAdapter()
  {
    if (buildPlanItemProvider == null)
    {
      buildPlanItemProvider = new BuildPlanItemProvider(this);
    }

    return buildPlanItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.JRETask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JRETaskItemProvider jreTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.JRETask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJRETaskAdapter()
  {
    if (jreTaskItemProvider == null)
    {
      jreTaskItemProvider = new JRETaskItemProvider(this);
    }

    return jreTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.MavenImportTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MavenImportTaskItemProvider mavenImportTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.MavenImportTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMavenImportTaskAdapter()
  {
    if (mavenImportTaskItemProvider == null)
    {
      mavenImportTaskItemProvider = new MavenImportTaskItemProvider(this);
    }

    return mavenImportTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ComponentExtension} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentExtensionItemProvider componentExtensionItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ComponentExtension}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentExtensionAdapter()
  {
    if (componentExtensionItemProvider == null)
    {
      componentExtensionItemProvider = new ComponentExtensionItemProvider(this);
    }

    return componentExtensionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ComponentDefinition} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentDefinitionItemProvider componentDefinitionItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ComponentDefinition}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentDefinitionAdapter()
  {
    if (componentDefinitionItemProvider == null)
    {
      componentDefinitionItemProvider = new ComponentDefinitionItemProvider(this);
    }

    return componentDefinitionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.TargletImportTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargletImportTaskItemProvider targletImportTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.TargletImportTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTargletImportTaskAdapter()
  {
    if (targletImportTaskItemProvider == null)
    {
      targletImportTaskItemProvider = new TargletImportTaskItemProvider(this);
    }

    return targletImportTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.FileAssociationTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileAssociationTaskItemProvider fileAssociationTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.FileAssociationTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileAssociationTaskAdapter()
  {
    if (fileAssociationTaskItemProvider == null)
    {
      fileAssociationTaskItemProvider = new FileAssociationTaskItemProvider(this);
    }

    return fileAssociationTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.FileAssociationsTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileAssociationsTaskItemProvider fileAssociationsTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.FileAssociationsTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileAssociationsTaskAdapter()
  {
    if (fileAssociationsTaskItemProvider == null)
    {
      fileAssociationsTaskItemProvider = new FileAssociationsTaskItemProvider(this);
    }

    return fileAssociationsTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.FileMapping} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileMappingItemProvider fileMappingItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.FileMapping}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileMappingAdapter()
  {
    if (fileMappingItemProvider == null)
    {
      fileMappingItemProvider = new FileMappingItemProvider(this);
    }

    return fileMappingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.FileEditor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileEditorItemProvider fileEditorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.FileEditor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileEditorAdapter()
  {
    if (fileEditorItemProvider == null)
    {
      fileEditorItemProvider = new FileEditorItemProvider(this);
    }

    return fileEditorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.TargetPlatformTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargetPlatformTaskItemProvider targetPlatformTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.TargetPlatformTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTargetPlatformTaskAdapter()
  {
    if (targetPlatformTaskItemProvider == null)
    {
      targetPlatformTaskItemProvider = new TargetPlatformTaskItemProvider(this);
    }

    return targetPlatformTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.AutomaticSourceLocator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AutomaticSourceLocatorItemProvider automaticSourceLocatorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.AutomaticSourceLocator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAutomaticSourceLocatorAdapter()
  {
    if (automaticSourceLocatorItemProvider == null)
    {
      automaticSourceLocatorItemProvider = new AutomaticSourceLocatorItemProvider(this);
    }

    return automaticSourceLocatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.TargletTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargletTaskItemProvider targletTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.TargletTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTargletTaskAdapter()
  {
    if (targletTaskItemProvider == null)
    {
      targletTaskItemProvider = new TargletTaskItemProvider(this);
    }

    return targletTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Targlet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargletItemProvider targletItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Targlet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTargletAdapter()
  {
    if (targletItemProvider == null)
    {
      targletItemProvider = new TargletItemProvider(this);
    }

    return targletItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.RepositoryList} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RepositoryListItemProvider repositoryListItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.RepositoryList}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRepositoryListAdapter()
  {
    if (repositoryListItemProvider == null)
    {
      repositoryListItemProvider = new RepositoryListItemProvider(this);
    }

    return repositoryListItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.RedirectionTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RedirectionTaskItemProvider redirectionTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.RedirectionTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRedirectionTaskAdapter()
  {
    if (redirectionTaskItemProvider == null)
    {
      redirectionTaskItemProvider = new RedirectionTaskItemProvider(this);
    }

    return redirectionTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ManualSourceLocator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ManualSourceLocatorItemProvider manualSourceLocatorItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ManualSourceLocator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createManualSourceLocatorAdapter()
  {
    if (manualSourceLocatorItemProvider == null)
    {
      manualSourceLocatorItemProvider = new ManualSourceLocatorItemProvider(this);
    }

    return manualSourceLocatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ContextVariableTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextVariableTaskItemProvider contextVariableTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ContextVariableTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextVariableTaskAdapter()
  {
    if (contextVariableTaskItemProvider == null)
    {
      contextVariableTaskItemProvider = new ContextVariableTaskItemProvider(this);
    }

    return contextVariableTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.VariableChoice} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableChoiceItemProvider variableChoiceItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.VariableChoice}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVariableChoiceAdapter()
  {
    if (variableChoiceItemProvider == null)
    {
      variableChoiceItemProvider = new VariableChoiceItemProvider(this);
    }

    return variableChoiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.ResourceCreationTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourceCreationTaskItemProvider resourceCreationTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.ResourceCreationTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResourceCreationTaskAdapter()
  {
    if (resourceCreationTaskItemProvider == null)
    {
      resourceCreationTaskItemProvider = new ResourceCreationTaskItemProvider(this);
    }

    return resourceCreationTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.MaterializationTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MaterializationTaskItemProvider materializationTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.MaterializationTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMaterializationTaskAdapter()
  {
    if (materializationTaskItemProvider == null)
    {
      materializationTaskItemProvider = new MaterializationTaskItemProvider(this);
    }

    return materializationTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Component} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentItemProvider componentItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Component}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentAdapter()
  {
    if (componentItemProvider == null)
    {
      componentItemProvider = new ComponentItemProvider(this);
    }

    return componentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.EclipseIniTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EclipseIniTaskItemProvider eclipseIniTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.EclipseIniTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEclipseIniTaskAdapter()
  {
    if (eclipseIniTaskItemProvider == null)
    {
      eclipseIniTaskItemProvider = new EclipseIniTaskItemProvider(this);
    }

    return eclipseIniTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.CompoundSetupTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompoundSetupTaskItemProvider compoundSetupTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.CompoundSetupTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompoundSetupTaskAdapter()
  {
    if (compoundSetupTaskItemProvider == null)
    {
      compoundSetupTaskItemProvider = new CompoundSetupTaskItemProvider(this);
    }

    return compoundSetupTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.BuckminsterImportTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BuckminsterImportTaskItemProvider buckminsterImportTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.BuckminsterImportTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBuckminsterImportTaskAdapter()
  {
    if (buckminsterImportTaskItemProvider == null)
    {
      buckminsterImportTaskItemProvider = new BuckminsterImportTaskItemProvider(this);
    }

    return buckminsterImportTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.Preferences} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PreferencesItemProvider preferencesItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.Preferences}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPreferencesAdapter()
  {
    if (preferencesItemProvider == null)
    {
      preferencesItemProvider = new PreferencesItemProvider(this);
    }

    return preferencesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.LinkLocationTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinkLocationTaskItemProvider linkLocationTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.LinkLocationTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLinkLocationTaskAdapter()
  {
    if (linkLocationTaskItemProvider == null)
    {
      linkLocationTaskItemProvider = new LinkLocationTaskItemProvider(this);
    }

    return linkLocationTaskItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.releng.setup.EclipsePreferenceTask} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EclipsePreferenceTaskItemProvider eclipsePreferenceTaskItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.releng.setup.EclipsePreferenceTask}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEclipsePreferenceTaskAdapter()
  {
    if (eclipsePreferenceTaskItemProvider == null)
    {
      eclipsePreferenceTaskItemProvider = new EclipsePreferenceTaskItemProvider(this);
    }

    return eclipsePreferenceTaskItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || ((Class<?>)type).isInstance(adapter))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List<IChildCreationExtender> getChildCreationExtenders()
  {
    return childCreationExtenderManager.getChildCreationExtenders();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
  {
    return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceLocator getResourceLocator()
  {
    return childCreationExtenderManager;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (metaIndexItemProvider != null)
    {
      metaIndexItemProvider.dispose();
    }
    if (indexItemProvider != null)
    {
      indexItemProvider.dispose();
    }
    if (eclipseItemProvider != null)
    {
      eclipseItemProvider.dispose();
    }
    if (configurationItemProvider != null)
    {
      configurationItemProvider.dispose();
    }
    if (projectItemProvider != null)
    {
      projectItemProvider.dispose();
    }
    if (branchItemProvider != null)
    {
      branchItemProvider.dispose();
    }
    if (preferencesItemProvider != null)
    {
      preferencesItemProvider.dispose();
    }
    if (setupItemProvider != null)
    {
      setupItemProvider.dispose();
    }
    if (compoundSetupTaskItemProvider != null)
    {
      compoundSetupTaskItemProvider.dispose();
    }
    if (contextVariableTaskItemProvider != null)
    {
      contextVariableTaskItemProvider.dispose();
    }
    if (variableChoiceItemProvider != null)
    {
      variableChoiceItemProvider.dispose();
    }
    if (eclipseIniTaskItemProvider != null)
    {
      eclipseIniTaskItemProvider.dispose();
    }
    if (linkLocationTaskItemProvider != null)
    {
      linkLocationTaskItemProvider.dispose();
    }
    if (p2TaskItemProvider != null)
    {
      p2TaskItemProvider.dispose();
    }
    if (installableUnitItemProvider != null)
    {
      installableUnitItemProvider.dispose();
    }
    if (p2RepositoryItemProvider != null)
    {
      p2RepositoryItemProvider.dispose();
    }
    if (buckminsterImportTaskItemProvider != null)
    {
      buckminsterImportTaskItemProvider.dispose();
    }
    if (materializationTaskItemProvider != null)
    {
      materializationTaskItemProvider.dispose();
    }
    if (componentItemProvider != null)
    {
      componentItemProvider.dispose();
    }
    if (manualSourceLocatorItemProvider != null)
    {
      manualSourceLocatorItemProvider.dispose();
    }
    if (automaticSourceLocatorItemProvider != null)
    {
      automaticSourceLocatorItemProvider.dispose();
    }
    if (componentExtensionItemProvider != null)
    {
      componentExtensionItemProvider.dispose();
    }
    if (componentDefinitionItemProvider != null)
    {
      componentDefinitionItemProvider.dispose();
    }
    if (mavenImportTaskItemProvider != null)
    {
      mavenImportTaskItemProvider.dispose();
    }
    if (targletImportTaskItemProvider != null)
    {
      targletImportTaskItemProvider.dispose();
    }
    if (targletTaskItemProvider != null)
    {
      targletTaskItemProvider.dispose();
    }
    if (targletItemProvider != null)
    {
      targletItemProvider.dispose();
    }
    if (repositoryListItemProvider != null)
    {
      repositoryListItemProvider.dispose();
    }
    if (redirectionTaskItemProvider != null)
    {
      redirectionTaskItemProvider.dispose();
    }
    if (apiBaselineTaskItemProvider != null)
    {
      apiBaselineTaskItemProvider.dispose();
    }
    if (gitCloneTaskItemProvider != null)
    {
      gitCloneTaskItemProvider.dispose();
    }
    if (projectSetImportTaskItemProvider != null)
    {
      projectSetImportTaskItemProvider.dispose();
    }
    if (targetPlatformTaskItemProvider != null)
    {
      targetPlatformTaskItemProvider.dispose();
    }
    if (eclipsePreferenceTaskItemProvider != null)
    {
      eclipsePreferenceTaskItemProvider.dispose();
    }
    if (fileAssociationTaskItemProvider != null)
    {
      fileAssociationTaskItemProvider.dispose();
    }
    if (fileAssociationsTaskItemProvider != null)
    {
      fileAssociationsTaskItemProvider.dispose();
    }
    if (fileMappingItemProvider != null)
    {
      fileMappingItemProvider.dispose();
    }
    if (fileEditorItemProvider != null)
    {
      fileEditorItemProvider.dispose();
    }
    if (workingSetTaskItemProvider != null)
    {
      workingSetTaskItemProvider.dispose();
    }
    if (resourceCopyTaskItemProvider != null)
    {
      resourceCopyTaskItemProvider.dispose();
    }
    if (resourceCreationTaskItemProvider != null)
    {
      resourceCreationTaskItemProvider.dispose();
    }
    if (textModifyTaskItemProvider != null)
    {
      textModifyTaskItemProvider.dispose();
    }
    if (textModificationItemProvider != null)
    {
      textModificationItemProvider.dispose();
    }
    if (keyBindingTaskItemProvider != null)
    {
      keyBindingTaskItemProvider.dispose();
    }
    if (keyBindingContextItemProvider != null)
    {
      keyBindingContextItemProvider.dispose();
    }
    if (commandParameterItemProvider != null)
    {
      commandParameterItemProvider.dispose();
    }
    if (mylynQueryTaskItemProvider != null)
    {
      mylynQueryTaskItemProvider.dispose();
    }
    if (mylynQueriesTaskItemProvider != null)
    {
      mylynQueriesTaskItemProvider.dispose();
    }
    if (queryItemProvider != null)
    {
      queryItemProvider.dispose();
    }
    if (queryAttributeItemProvider != null)
    {
      queryAttributeItemProvider.dispose();
    }
    if (mylynBuildsTaskItemProvider != null)
    {
      mylynBuildsTaskItemProvider.dispose();
    }
    if (buildPlanItemProvider != null)
    {
      buildPlanItemProvider.dispose();
    }
    if (jreTaskItemProvider != null)
    {
      jreTaskItemProvider.dispose();
    }
  }

}
