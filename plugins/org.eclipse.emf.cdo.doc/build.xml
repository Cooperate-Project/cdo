<?xml version="1.0" encoding="UTF-8"?>
<project name="org.eclipse.emf.cdo.doc" default="build.jars" basedir=".">

	<!-- Plug-in version.  This is a HACK.  Do not forget to update. -->
	<property name="pluginVersion" value="2.0.0" />

	<property name="plugin" value="org.eclipse.emf.cdo" />
	<property name="docPlugin" value="org.eclipse.emf.cdo.doc" />

	<property name="filesToInclude" value="META-INF/,about.*,*.gif,*.png,plugin.*,index/**, help/**" />

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="false" />
	<property name="javacDebugInfo" value="on" />
	<property name="javacVerbose" value="true" />
	<property name="compilerArg" value="" />

	<echo message="Set javacSource and javacTarget = 1.5" />
	<property name="javacSource" value="1.5" />
	<property name="javacTarget" value="1.5" />

	<path id="bc">
		<fileset dir="${java.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<property name="bootclasspath" refid="bc" />

	<!-- new 060508 to make build work when using JDK1.5 source/target -->
	<echo message="Set J2SE-1.5 = ${bootclasspath}" />
	<property name="J2SE-1.5" value="${bootclasspath}" />
	<condition property="bundleBootClasspath" value="${J2SE-1.5}">
		<isset property="J2SE-1.5" />
	</condition>
	<condition property="bundleJavacSource" value="1.5">
		<isset property="J2SE-1.5" />
	</condition>
	<condition property="bundleJavacTarget" value="1.5">
		<isset property="J2SE-1.5" />
	</condition>

	<property name="basews" value="${ws}" />
	<property name="baseos" value="${os}" />
	<property name="basearch" value="${arch}" />
	<property name="basenl" value="${nl}" />

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder" />
		</condition>
		<property name="pluginTemp" value="${basedir}" />
		<condition property="build.result.folder" value="${pluginTemp}/${docPlugin}">
			<isset property="buildTempFolder" />
		</condition>
		<property name="build.result.folder" value="${basedir}" />
		<property name="temp.folder" value="${basedir}/temp.folder" />
		<property name="plugin.destination" value="${basedir}" />
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: ${plugin} for an update site.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<zip destfile="${plugin.destination}/${docPlugin}_${pluginVersion}.${forceContextQualifier}.jar"
		     basedir="${temp.folder}/${docPlugin}_${pluginVersion}.${forceContextQualifier}"
		     filesonly="false"
		     whenempty="skip"
		     update="false" />
		<delete dir="${temp.folder}" />
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: ${docPlugin}.">
		<property name="eclipseDir" location="../.." />
		<property name="curDir" location="." />
		<echo message="Building JavaDocs in: ${curDir}" />

		<chmod perm="754" file="build/antJavadoc.sh" />
		<exec executable="bash" dir="build">
			<arg line="./antJavadoc.sh ${eclipseDir}" />
		</exec>

		<loadfile property="generatedTocSnippet" srcFile="help/toc_javadocs.snippet" />
		<replace token="&lt;link toc=&quot;toc_javadocs.xml&quot;/>"
		         value="${generatedTocSnippet}"
		         file="help/toc.xml" />
		<delete file="help/toc_javadocs.snippet" />

		<antcall target="build.index" />
	</target>

	<target name="build.index" depends="init" description="Builds search index for the plug-in" if="eclipse.running">
		<help.buildHelpIndex manifest="plugin.xml" destination="." />
	</target>

	<target name="build.sources" depends="init">
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${docPlugin}_${pluginVersion}.${forceContextQualifier}" />
		<copy todir="${destination.temp.folder}/${docPlugin}_${pluginVersion}.${forceContextQualifier}"
		      failonerror="true"
		      overwrite="false">
			<fileset dir="${basedir}" includes="${filesToInclude}" />
		</copy>
		<eclipse.versionReplacer path="${destination.temp.folder}/${docPlugin}_${pluginVersion}.${forceContextQualifier}"
		                         version="${pluginVersion}.${forceContextQualifier}" />
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
	</target>

	<target name="clean"
	        depends="init"
	        description="Clean the plug-in: ${docPlugin} of all the zips, jars and logs created.">
		<delete file="${plugin.destination}/${docPlugin}_${pluginVersion}.${forceContextQualifier}.jar" />
		<delete file="${plugin.destination}/${docPlugin}_${pluginVersion}.${forceContextQualifier}.zip" />
		<delete dir="${temp.folder}" />
	</target>

	<target name="zip.plugin"
	        depends="init"
	        description="Create a zip containing all the elements for the plug-in: ${docPlugin}.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="build.sources" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin.log" />
		</delete>
		<zip destfile="${plugin.destination}/${docPlugin}_${pluginVersion}.${forceContextQualifier}.zip"
		     basedir="${temp.folder}"
		     filesonly="true"
		     whenempty="skip"
		     update="false" />
		<delete dir="${temp.folder}" />
	</target>

</project>
